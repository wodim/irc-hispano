/*
 * IA-64 basic spinlock operations
 * 
 * $Id: spinlock.h.in,v 1.1 2007/05/24 12:46:41 mbuna Exp $
 */
#ifndef INCLUDED_PEAK_SPINLOCK_H_
#define INCLUDED_PEAK_SPINLOCK_H_

#include "atomic.h" /* ia64_cmpxchg4_acq */

/* PEAK INTERNAL SPIN LOCK
 * 
 * _peak_spinlock_lock(lockp)
 * _peak_spinlock_lock_try(lockp) - returns 0 (busy) or 1 (got the lock)
 * _peak_spinlock_unlock(lockp)
 * 
 */

extern int _peak_is_threaded;

typedef struct {
        volatile unsigned int lock;
} peak_spinlock_t;
#define PEAK_SPINLOCK_INITIALIZER (peak_spinlock_t){ (0) }
#define ia64_barrier()  asm volatile ("":::"memory")


static inline void
_peak_spinlock_lock(peak_spinlock_t *lockp)
{
        __u32 *ia64_spinlock_ptr = (__u32 *)lockp;
        __u64 ia64_spinlock_val;
        ia64_spinlock_val = ia64_cmpxchg4_acq(ia64_spinlock_ptr, 1, 0);
        if (ia64_spinlock_val) {
                do {
                        while (*ia64_spinlock_ptr)
                                ia64_barrier();
                        ia64_spinlock_val = ia64_cmpxchg4_acq(ia64_spinlock_ptr, 1, 0);
                } while (ia64_spinlock_val);
        }
}

static inline int
_peak_spinlock_lock_try(peak_spinlock_t *lockp)
{
        __u32 *ia64_spinlock_ptr = (__u32 *)lockp;
        return (int) (ia64_cmpxchg4_acq(ia64_spinlock_ptr, 1, 0) == 0);
}

static inline void
_peak_spinlock_unlock(peak_spinlock_t *lockp)
{
        ia64_barrier();
        lockp->lock = 0;
}

/*
static inline void
_peak_spinlock_unlock_wait(peak_spinlock_t *lockp)
{
        do {
                ia64_barrier();
        } while (lockp->lock);
}
*/

#endif /* INCLUDED_PEAK_SPINLOCK_H_ */
